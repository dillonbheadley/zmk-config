/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFAULT 0
#define NAV 1
#define SYMB 2
#define FUNC 3
#define GAME 4

&lt {
  quick-tap-ms = <100>
};

&sk {
  release-after-ms = <500>;
  quick-release;
};

&sl {
  release-after-ms = <500>;
};

&mmv {
  // trigger-period-ms = <2>;
  // time-to-max-speed-ms = <2>;
  acceleration-exponent = <1>;
};

/ { 

  combos {
    compatible = "zmk,combos";
    q {
      timeout-ms = <50>;
      key-positions = <1 2>;
      bindings = <&kp Q>;
      layers = <DEFAULT>;
    };
    v {
      timeout-ms = <50>;
      key-positions = <2 3>;
      bindings = <&kp V>;
      layers = <DEFAULT>;
    };
    w {
      timeout-ms = <50>;
      key-positions = <11 12>;
      bindings = <&kp W>;
      layers = <DEFAULT>;
    };
    b {
      timeout-ms = <50>;
      key-positions = <12 13>;
      bindings = <&kp B>;
      layers = <DEFAULT>;
    };
    z {
      timeout-ms = <50>;
      key-positions = <21 22>;
      bindings = <&kp Z>;
      layers = <DEFAULT>;
    };
    p {
      timeout-ms = <50>;
      key-positions = <22 23>;
      bindings = <&kp P>;
      layers = <DEFAULT>;
    };
    dot {
      timeout-ms = <50>;
      key-positions = <16 17>;
      bindings = <&kp DOT>;
      layers = <DEFAULT>;
    };
    cmma {
      timeout-ms = <50>;
      key-positions = <17 18>;
      bindings = <&kp COMMA>;
      layers = <DEFAULT>;
    };
    quot {
      timeout-ms = <50>;
      key-positions = <6 7>;
      bindings = <&kp QUOT>;
      layers = <DEFAULT>;
    };
    fslh {
      timeout-ms = <50>;
      key-positions = <7 8>;
      bindings = <&kp fslh>;
      layers = <DEFAULT>;
    };

    codeprev {
      timeout-ms = <50>;
      key-positions = <6 7>;
      bindings = <&kp LC(MINUS)>;
      layers = <NAV>;
    };
    codenext {
      timeout-ms = <50>;
      key-positions = <7 8>;
      bindings = <&kp LC(LS(MINUS))>;
      layers = <NAV>;
    };
    pgup {
      timeout-ms = <50>;
      key-positions = <6 7 8>;
      bindings = <&kp PG_UP>;
      layers = <NAV>;
    };
    pgdn {
      timeout-ms = <50>;
      key-positions = <11 12 13>;
      bindings = <&kp PG_DN>;
      layers = <NAV>;
    };

    lpar {
      timeout-ms = <50>;
      key-positions = <12 13>;
      bindings = <&kp LPAR>;
      layers = <SYMB>;
    };
    rpar {
      timeout-ms = <50>;
      key-positions = <16 17>;
      bindings = <&kp RPAR>;
      layers = <SYMB>;
    };
    lbkt {
      timeout-ms = <50>;
      key-positions = <2 3>;
      bindings = <&kp LBKT>;
      layers = <SYMB>;
    };
    rbkt {
      timeout-ms = <50>;
      key-positions = <6 7>;
      bindings = <&kp RBKT>;
      layers = <SYMB>;
    };
    lbrc {
      timeout-ms = <50>;
      key-positions = <11 12>;
      bindings = <&kp LBRC>;
      layers = <SYMB>;
    };
    rbrc {
      timeout-ms = <50>;
      key-positions = <17 18>;
      bindings = <&kp RBRC>;
      layers = <SYMB>;
    };
    lt {
      timeout-ms = <50>;
      key-positions = <22 23>;
      bindings = <&kp LT>;
      layers = <SYMB>;
    };
    gt {
      timeout-ms = <50>;
      key-positions = <26 27>;
      bindings = <&kp GT>;
      layers = <SYMB>;
    };

    btclr {
      timeout-ms = <50>;
      key-positions = <10 19>;
      bindings = <&bt BT_CLR>;
      layers = <FUNC>;
    };
    btsel0 {
      timeout-ms = <50>;
      key-positions = <2 3>;
      bindings = <&bt BT_SEL 0>;
      layers = <FUNC>;
    };
    btnxt {
      timeout-ms = <50>;
      key-positions = <12 13>;
      bindings = <&bt BT_NXT>;
      layers = <FUNC>;
    };
    scrl_left {
      timeout-ms = <50>;
      key-positions = <7 8>;
      bindings = <&msc SCRL_LEFT>;
      layers = <FUNC>;
    };
    scrl_right {
      timeout-ms = <50>;
      key-positions = <6 7>;
      bindings = <&msc SCRL_RIGHT>;
      layers = <FUNC>;
    };
  }

  behaviors {
    hrml: home_row_mod_left {
      compatible = "zmk,behavior-hold-tap";
      label = "HOME_ROW_MOD";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      require-prior-idle-ms = <125>;
      hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
      bindings = <&kp>, <&kp>;
    };
    hrmr: home_row_mod_right {
      compatible = "zmk,behavior-hold-tap";
      label = "HOME_ROW_MOD";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      require-prior-idle-ms = <125>;
      hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
      bindings = <&kp>, <&kp>;
    };

    ml: mod_layer {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_LAYER";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <150>;
      bindings = <&mo>, <&sk>;
    };

    shftcmma: shift_comma {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp CMMA>, <&kp QMARK>;
      mods = <(MOD_LSFT)>;
    };
    shftdot: shift_dot {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp BANG>;
      mods = <(MOD_LSFT)>;
    };
    shft0: shift_0 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp N0>, <&kp COMMA>;
      mods = <(MOD_LSFT)>;
    };
    shft1: shift_1 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp N1>, <&kp DOT>;
      mods = <(MOD_LSFT)>;
    };
    shft9: shift_9 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp N9>, <&kp TILDE>;
      mods = <(MOD_LSFT)>;
    };

    td_mt: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&ml NAV LC(LG(LALT))>, <&kp LSHIFT>;
    };

    conditional_layers {
      compatible = "zmk,conditional-layers";
      tri_layer {
        if-layers = <NAV SYMB>;
        then-layer = <FUNC>;
      };
    };
  };

  keymap {
    compatible = "zmk,keymap";
    default_layer {
      // v p z q b w . , ' /
      bindings = <
        &none  &kp G  &kp D  &kp L  &none                               &none  &kp U  &kp O  &kp Y  &none 
        &hrml LCTL N  &hrml LALT S  &hrml LGUI T  &hrml LSFT H  &none       &none  &hrmr LSFT A  &hrmr LGUI E  &hrmr LALT I  &hrmr LCTL C
        &none  &kp F  &kp M  &kp R  &ml NAV LC(LG(LALT))                &lt SYMB SPACE  &kp K  &kp J  &kp X  &none
                                                &none  &none            &none  &none
      >;
    };

    nav_layer {
        // &tog GAME  &sk RALT  &key_repeat  &caps_word  &sk GLOBE             &kp PG_UP     &kp LBKT        &kp UP          &kp RBKT        &tog ALT 
        // &sk LCTL  &sk LALT  &sk LGUI      &sk LSFT    &sk LC(RS(LALT))      &kp PG_DN     &kp LEFT        &kp DOWN        &kp RIGHT       &kp ENTER
        // &kp ESC   &kp TAB   &kp ENTER     &kp SPC     &kp BKSP              &kp LC(MINUS) &kp C_PREV      &kp C_PP        &kp C_NEXT        &kp DEL 
      bindings = <
        &none  &sk RALT  &key_repeat    &caps_word  &none             &none     &kp LBKT        &kp UP          &kp RBKT        &none 
        &sk LCTL  &sk LALT  &sk LGUI    &sk LSFT  &none               &none     &kp LEFT        &kp DOWN        &kp RIGHT       &kp ENTER
        &none   &kp TAB     &kp ESC     &kp SPC     &none             &kp BKSP   &kp C_PREV      &kp C_PP        &kp C_NEXT      &none 
                                              &none  &none            &none  &none
      >;
    };
      
    symbols_layer {      
        // &kp PRCT    &kp N1  &kp N2  &kp N3  &kp STAR        &kp PLUS   &kp LPAR   &kp LBKT   &kp PIPE   &kp TILDE  
        // &kp SEMI    &kp N4  &kp N5  &kp N6  &kp ATSN        &kp EQUAL  &kp MINUS  &kp GRAV   &kp AMPS   &kp COLON  
        // &kp CMMA    &kp N7  &kp N8  &kp N9  &kp HASH        &kp CRRT   &kp LBRC   &kp LT     &kp DLLR  &kp BSLH 
      bindings = <
        &none       &kp N1  &kp N2  &kp N3  &none                                   &none   &kp BSLH   &kp GRAV   &kp PIPE   &none  
        &hrml LCTL N0    &hrml LALT N4  &hrml LGUI N5  &hrml LSFT N6  &none       &none   &hrmr LSFT MINUS  &hrmr LGUI EQUAL   &hrmr LALT AMPS   &hrmr LCTL SEMI  
        &none       &kp N7  &kp N8  &kp N9  &none                                   &none   &kp UNDER   &kp BANG   &kp QMARK    &none 
                                  &trans  &trans                                   &none   &sk LGUI
      >;
    };

    function_layer {
        // &kp F1    &kp F2    &kp F3      &kp F4    &kp F5          &bt BT_SEL 0   &msc SCRL_DOWN  &mmv MOVE_UP     &msc SCRL_UP    &bt BT_CLR
        // &kp F6    &kp F7    &sk LSFT   &mkp LCLK  &rmclick        &bt BT_NXT     &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &kp LC(UP)  
        // &kp F8    &kp F9    &kp F10      &kp F11  &kp F12         &bt BT_PRV     &sk LSFT        &sk LGUI         &sk LALT        &sk LCTL    
      bindings = <
        &none    &kp F1    &kp F2      &kp F3    &none            &none   &msc SCRL_DOWN  &mmv MOVE_UP     &msc SCRL_UP    &none
        &sk LSFT   &mkp MCLK    &mkp RCLK   &mkp LCLK  &none      &none     &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &kp LC(UP)  
        &none    &kp F4    &kp F5      &kp F6  &none              &none    &sk LSFT        &sk LGUI         &sk LALT        &none
                                    &bootloader  &none            &none  &mkp MCLK  
      >;
    };

    game_layer {
      bindings = <
        &kp ESC  &kp Q  &kp W  &kp E  &kp R             &kp T  &kp N1  &kp UP  &kp N2  &kp BKSP 
        &kp TAB  &kp A  &kp S  &kp D  &kp F             &kp G  &kp LEFT  &kp DOWN  &kp RIGHT  &kp ENTER
        &kp LSFT  &kp Z  &kp X  &kp C  &kp V            &kp B  &kp N3  &kp N4  &kp N5  &kp N6
                          &kp SPC  &kp LCTL             &tog GAME  &kp SPC
        >;
    };
  };
};
