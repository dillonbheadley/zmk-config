/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFAULT 0
#define NAV 1
#define SYMB 2
#define FUNC 3
#define GAME 4

&lt {
  quick-tap-ms = <200>;
};

&sk {
  release-after-ms = <500>;
  quick-release;
};

&sl {
  release-after-ms = <500>;
};

&mmv {
  // trigger-period-ms = <2>;
  // time-to-max-speed-ms = <2>;
  acceleration-exponent = <1>;
};

/ { 

  combos {
    compatible = "zmk,combos";
    b {
      timeout-ms = <50>;
      key-positions = <12 13>;
      bindings = <&kp B>;
      layers = <DEFAULT>;
    };
    j {
      timeout-ms = <50>;
      key-positions = <16 17>;
      bindings = <&kp J>;
      layers = <DEFAULT>;
    };
    z {
      timeout-ms = <50>;
      key-positions = <11 12>;
      bindings = <&kp Z>;
      layers = <DEFAULT>;
    };
    slash {
      timeout-ms = <50>;
      key-positions = <17 18>;
      bindings = <&kp FSLH>;
      layers = <DEFAULT>;
    };

    britup {
      timeout-ms = <50>;
      key-positions = <1 2 3>;
      bindings = <&kp C_BRI_UP>;
      layers = <DEFAULT>;
    };
    britdn {
      timeout-ms = <50>;
      key-positions = <21 22 23>;
      bindings = <&kp C_BRI_DN>;
      layers = <DEFAULT>;
    };
    volup {
      timeout-ms = <50>;
      key-positions = <6 7 8>;
      bindings = <&kp C_VOL_UP>;
      layers = <DEFAULT>;
    };
    volmt {
      timeout-ms = <50>;
      key-positions = <16 17 18>;
      bindings = <&kp C_MUTE>;
      layers = <DEFAULT>;
    };
    voldn {
      timeout-ms = <50>;
      key-positions = <26 27 28>;
      bindings = <&kp C_VOL_DN>;
      layers = <DEFAULT>;
    };

    bksp {
      timeout-ms = <50>;
      key-positions = <22 23>;
      bindings = <&kp BKSP>;
      layers = <NAV>;
    };
    codeprev {
      timeout-ms = <50>;
      key-positions = <6 7>;
      bindings = <&kp LC(MINUS)>;
      layers = <NAV>;
    };
    codenext {
      timeout-ms = <50>;
      key-positions = <7 8>;
      bindings = <&kp LC(LS(MINUS))>;
      layers = <NAV>;
    };
    prev {
      timeout-ms = <50>;
      key-positions = <26 27>;
      bindings = <&kp C_PREV>;
      layers = <NAV>;
    };
    next {
      timeout-ms = <50>;
      key-positions = <27 28>;
      bindings = <&kp C_NEXT>;
      layers = <NAV>;
    };

    lpar {
      timeout-ms = <50>;
      key-positions = <12 13>;
      bindings = <&kp LPAR>;
      layers = <SYMB>;
    };
    rpar {
      timeout-ms = <50>;
      key-positions = <16 17>;
      bindings = <&kp RPAR>;
      layers = <SYMB>;
    };
    lbrc {
      timeout-ms = <50>;
      key-positions = <2 3>;
      bindings = <&kp LBRC>;
      layers = <SYMB>;
    };
    rbrc {
      timeout-ms = <50>;
      key-positions = <6 7>;
      bindings = <&kp RBRC>;
      layers = <SYMB>;
    };
    lbkt {
      timeout-ms = <50>;
      key-positions = <11 12>;
      bindings = <&kp LBKT>;
      layers = <SYMB>;
    };
    rbkt {
      timeout-ms = <50>;
      key-positions = <17 18>;
      bindings = <&kp RBKT>;
      layers = <SYMB>;
    };
    lt {
      timeout-ms = <50>;
      key-positions = <22 23>;
      bindings = <&kp LT>;
      layers = <SYMB>;
    };
    gt {
      timeout-ms = <50>;
      key-positions = <26 27>;
      bindings = <&kp GT>;
      layers = <SYMB>;
    };

    btclr {
      timeout-ms = <50>;
      key-positions = <10 19>;
      bindings = <&bt BT_CLR>;
      layers = <FUNC>;
    };
    btsel0 {
      timeout-ms = <50>;
      key-positions = <2 3>;
      bindings = <&bt BT_SEL 0>;
      layers = <FUNC>;
    };
    btnxt {
      timeout-ms = <50>;
      key-positions = <12 13>;
      bindings = <&bt BT_NXT>;
      layers = <FUNC>;
    };
    scrl_left {
      timeout-ms = <50>;
      key-positions = <7 8>;
      bindings = <&msc SCRL_LEFT>;
      layers = <FUNC>;
    };
    scrl_right {
      timeout-ms = <50>;
      key-positions = <6 7>;
      bindings = <&msc SCRL_RIGHT>;
      layers = <FUNC>;
    };
  };

  behaviors {
    hrml: home_row_mod_left {
      compatible = "zmk,behavior-hold-tap";
      flavor = "balanced";
      hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
      hold-trigger-on-release;
      tapping-term-ms = <300>;
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
    };
    hrmr: home_row_mod_right {
      compatible = "zmk,behavior-hold-tap";
      flavor = "balanced";
      hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
      hold-trigger-on-release;
      tapping-term-ms = <300>;
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
    };

    lm: layer_mod {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <150>;
      bindings = <&mo>, <&sk>;
    };

    shftcmma: shift_comma {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp CMMA>, <&kp QMARK>;
      mods = <(MOD_LSFT)>;
    };
    shftdot: shift_dot {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp BANG>;
      mods = <(MOD_LSFT)>;
    };
    shftslash: shift_slash {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp FSLH>, <&kp UNDER>;
      mods = <(MOD_LSFT)>;
    };
    shft1: shift_1 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp N1>, <&kp COMMA>;
      mods = <(MOD_LSFT)>;
    };

    conditional_layers {
      compatible = "zmk,conditional-layers";
      tri_layer {
        if-layers = <NAV SYMB>;
        then-layer = <FUNC>;
      };
    };
  };

  keymap {
    compatible = "zmk,keymap";
    default_layer {    
      bindings = <
        &kp Q  &kp W  &kp E  &kp R  &kp T                       &kp Y  &kp U  &kp I  &kp O  &kp QUOT 
        &kp A  &kp S  &kp D  &kp F  &kp G                       &kp H  &kp N  &kp K  &kp L  &kp P
        &kp Z  &kp X  &kp C  &kp V  &lm NAV LSFT       &lt SYMB SPACE  &kp M  &shftcmma  &shftdot  &shftslash
                              &trans  &trans           &trans  &trans
      >;
    };

    nav_layer {
      bindings = <
        &kp ESC  &sk RALT  &key_repeat  &sk LC(RG(LALT))  &sk GLOBE                 &kp PG_UP   &kp LBKT        &kp UP          &kp RBKT        &kp DEL 
        &sk LCTL  &sk LALT  &sk LGUI    &sk LSFT  &caps_word                &kp PG_DN     &kp LEFT        &kp DOWN        &kp RIGHT       &kp ENTER
        &kp CAPS   &kp TAB   &kp ENTER   &kp SPC   &none                    &lt SYMB BKSP   &kp LG(Z)      &kp C_PP        &kp LG(LS(Z))      &none 
                                                  &trans  &trans            &trans  &trans
      >;
    };
      
    symbols_layer {      
      bindings = <
        &kp DOT       &shft1  &kp N2  &kp N3  &kp STAR                                   &kp PLUS   &kp GRAV   &kp AMPS   &kp PIPE   &kp TILDE  
        &hrml LCTL N0  &hrml LALT N4  &hrml LGUI N5  &hrml LSFT N6  &kp ATSN       &kp EQUAL  &hrmr LSFT MINUS  &hrmr LGUI UNDER   &hrmr LALT COLON  &hrmr LCTL SEMI  
        &kp COMMA      &kp N7  &kp N8  &kp N9  &lt NAV BKSP                                   &trans  &kp DOLLAR  &kp PERCENT  &kp BSLH  &trans 
                                   &trans  &trans                                   &trans   &trans
      >;
    };

    function_layer {
      bindings = <
        &bootloader  &kp F1    &kp F2      &kp F3    &none            &none   &msc SCRL_DOWN  &mmv MOVE_UP     &msc SCRL_UP    &none
        &sk LSFT   &mkp MCLK    &mkp RCLK   &mkp LCLK  &none      &none     &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &kp LC(UP)  
        &none    &kp F4    &kp F5      &kp F6  &none              &none    &sk LSFT        &sk LGUI         &sk LALT        &none
                                          &trans  &trans            &trans  &trans  
      >;
    };

    game_layer {
      bindings = <
        &kp ESC  &kp Q  &kp W  &kp E  &kp R             &kp T  &kp N1  &kp UP  &kp N2  &kp BKSP 
        &kp TAB  &kp A  &kp S  &kp D  &kp F             &kp G  &kp LEFT  &kp DOWN  &kp RIGHT  &kp ENTER
        &kp LSFT  &kp Z  &kp X  &kp C  &kp V            &kp B  &kp N3  &kp N4  &kp N5  &kp N6
                          &kp SPC  &kp LCTL             &tog GAME  &kp SPC
        >;
    };
  };
};
